app:
  kafka:
    enable: true
    topic-name: link-update
    partitions: 1
    replication-factor: 1
  database-access-type: jpa
  scheduler:
    enable: true
    interval: PT120S
    force-check-delay: PT10S

spring:
  application:
    name: scrapper
  jooq:
    sql-dialect: postgres
  liquibase:
    enabled: false
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${SCRAPPER_URL}
    username: ${SCRAPPER_USERNAME}
    password: ${SCRAPPER_PASSWORD}
  cache:
    cache-names:
      - rate-limit-bucket
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
    type: jcache
  kafka:
    bootstrap-servers: localhost:9092


bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-bucket
      url: .*
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - bandwidths:
            - capacity: ${rate.limit.capacity:10}
              time: ${rate.limit.time:1}
              unit: ${rate.limit.unit:seconds}
          cache-key: "getHeader(\"X-Forwarded-For\")"
  cache-to-use: jcache

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

client:
  github:
    url: unset
    interval: PT60S
    back-off: linear
    codes: bad_gateway, internal_server_error, service_unavailable, forbidden
    max-attempts: 10
  stack-overflow:
    url: unset
    interval: PT60S
    back-off: exponential
    codes: bad_gateway, internal_server_error, service_unavailable, forbidden
    max-attempts: 10
  bot:
    url: unset
    interval: PT60S
    back-off: constant
    codes:
    max-attempts: 10

springdoc:
  swagger-ui:
    path: /swagger-ui
    enabled: true
