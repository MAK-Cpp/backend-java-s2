/*
 * This file is generated by jOOQ.
 */

package edu.java.scrapper.domain.jooq.tables;

import edu.java.scrapper.domain.jooq.DefaultSchema;
import edu.java.scrapper.domain.jooq.Keys;
import edu.java.scrapper.domain.jooq.tables.Chats.ChatsPath;
import edu.java.scrapper.domain.jooq.tables.ChatsAndLinks.ChatsAndLinksPath;
import edu.java.scrapper.domain.jooq.tables.records.LinksRecord;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Links extends TableImpl<LinksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LINKS</code>
     */
    public static final Links LINKS = new Links();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<LinksRecord> getRecordType() {
        return LinksRecord.class;
    }

    /**
     * The column <code>LINKS.LINK_ID</code>.
     */
    public final TableField<LinksRecord, Long> LINK_ID =
        createField(DSL.name("LINK_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>LINKS.URI</code>.
     */
    public final TableField<LinksRecord, String> URI =
        createField(DSL.name("URI"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>LINKS.LAST_UPDATE</code>.
     */
    public final TableField<LinksRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("LAST_UPDATE"),
        SQLDataType.LOCALDATETIME(6).nullable(false)
            .defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.LOCALDATETIME)),
        this,
        ""
    );

    private Links(Name alias, Table<LinksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Links(Name alias, Table<LinksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>LINKS</code> table reference
     */
    public Links(String alias) {
        this(DSL.name(alias), LINKS);
    }

    /**
     * Create an aliased <code>LINKS</code> table reference
     */
    public Links(Name alias) {
        this(alias, LINKS);
    }

    /**
     * Create a <code>LINKS</code> table reference
     */
    public Links() {
        this(DSL.name("LINKS"), null);
    }

    public <O extends Record> Links(
        Table<O> path,
        ForeignKey<O, LinksRecord> childPath,
        InverseForeignKey<O, LinksRecord> parentPath
    ) {
        super(path, childPath, parentPath, LINKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LinksPath extends Links implements Path<LinksRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> LinksPath(
            Table<O> path,
            ForeignKey<O, LinksRecord> childPath,
            InverseForeignKey<O, LinksRecord> parentPath
        ) {
            super(path, childPath, parentPath);
        }

        private LinksPath(Name alias, Table<LinksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LinksPath as(String alias) {
            return new LinksPath(DSL.name(alias), this);
        }

        @Override
        public LinksPath as(Name alias) {
            return new LinksPath(alias, this);
        }

        @Override
        public LinksPath as(Table<?> alias) {
            return new LinksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<LinksRecord, Long> getIdentity() {
        return (Identity<LinksRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<LinksRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    @NotNull
    public List<UniqueKey<LinksRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_45);
    }

    private transient ChatsAndLinksPath _chatsAndLinks;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.CHATS_AND_LINKS</code> table
     */
    public ChatsAndLinksPath chatsAndLinks() {
        if (_chatsAndLinks == null) {
            _chatsAndLinks = new ChatsAndLinksPath(this, null, Keys.CONSTRAINT_D54.getInverseKey());
        }

        return _chatsAndLinks;
    }

    /**
     * Get the implicit many-to-many join path to the <code>PUBLIC.CHATS</code>
     * table
     */
    public ChatsPath chats() {
        return chatsAndLinks().chats();
    }

    @Override
    @NotNull
    public Links as(String alias) {
        return new Links(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Links as(Name alias) {
        return new Links(alias, this);
    }

    @Override
    @NotNull
    public Links as(Table<?> alias) {
        return new Links(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Links rename(String name) {
        return new Links(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Links rename(Name name) {
        return new Links(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Links rename(Table<?> name) {
        return new Links(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Links where(Condition condition) {
        return new Links(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Links where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Links where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Links where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Links where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Links where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Links where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Links where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Links whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Links whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
