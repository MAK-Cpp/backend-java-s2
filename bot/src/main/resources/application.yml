app:
  kafka:
    enable: true
    group-id: bot
    topic-name: link-update
    partitions: 1
    replication-factor: 1

  telegram-token: ${BACKEND_JAVA_BOT_TOKEN}


spring:
  application:
    name: bot

  jackson:
    time-zone: UTC

  cache:
    cache-names:
      - ${rate.spring.cache.name:rate-limit-bucket}
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
    type: jcache

  kafka:
    consumer:
      auto-offset-reset: earliest
    bootstrap-servers: localhost:9092



server:
  port: 8090



management:
  server:
    port: 8091

  endpoints:
    web:
      base-path: /
      path-mapping:
        prometheus: metrics
      exposure:
        include: prometheus, info, health
    enabled-by-default: true

  endpoint:
    metrics:
      enabled: false

  metrics:
    tags:
      application: ${spring.application.name}




bucket4j:
  enabled: true

  filters:
    - cache-name: ${rate.bucket.cache.name:rate-limit-bucket}
      url: .*
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - bandwidths:
            - capacity: ${rate.limit.capacity:10}
              time: ${rate.limit.time:1}
              unit: ${rate.limit.unit:seconds}
          cache-key: "getHeader(\"X-Forwarded-For\")"

  cache-to-use: jcache



logging:
  config: classpath:log4j2-plain.xml



springdoc:
  swagger-ui:
    path: /swagger-ui
    enabled: true



client:
  scrapper:
    url: unset
    interval: PT60S
    back-off: linear
    codes: bad_gateway, internal_server_error, service_unavailable, forbidden
    max-attempts: 10
